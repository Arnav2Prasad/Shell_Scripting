So-called scripting languages are usually interpreted. A regular compiled program,
the interpreter,reads the program,translates it into an internal form,and then exe-
cutes the program.*


Suppose that you’d like to know how many users are
currently logged in. The who command tells you who is logged in:

            who

we use the wc (word count) program,which counts lines,words,and char-
acters. In this instance, we want wc -l, to count just lines:

            wc

            wc -l


      who | wc -l

The | (pipe) symbol creates a pipeline between the two programs: who’s output
becomes wc’s input. The result, printed by wc, is the number of users logged in.

-------------------------------------------------------------------------

When the shell runs a program,it asks the Unix kernel to start a new process and
run the given program in that process


Finally,semicolons separate multiple commands on the same line. The shell exe-
cutes them sequentially. If you use an ampersand (&) instead of a semicolon,the shell
runs the preceding command in the background,which simply means that it doesn’t
wait for the command to finish before continuing to the next command.


------------------------------------------------------------------------------------------
2.5.2 Variables

A variable is a name that you give to a particular piece of information,such as first_
name or driver_lic_no. 
All programming languages have variables,and the shell is no
exception. Every variable has a value,which is the contents or information that you
assigned to the variable. In the case of the shell,variable values can be,and often are,
empty—that is,they contain no characters. This is legitimate,common,and useful.
Empty values are referred to as null,and we’ll use that term a lot in the rest of the
book.

Shell variable names start with a letter or underscore,and may contain any number
of following letters,digits,or underscores. 
There is no limit on the number of charac-
ters in a variable name. Shell variables hold string values,and there is also no limit
on the number of characters that they may hold. (The Bourne shell was one of the
few early Unix programs to follow a “no arbitrary limits” design principle.) 
For example:
            $ myvar=this_is_a_long_string_that_does_not_mean_much                   Assign a value
            $ echo $myvar                                                           Print the value
this_is_a_long_string_that_does_not_mean_much

As you can see,variables are assigned values by writing the variable name,immedi-
ately followed by an = character,and the new value,without any intervening spaces.

Shell variable values are retrieved by prefixing the variable’s name with a $ character.
Use quotes when assigning a literal value that contains spaces:

      first=isaac middle=bashevis last=singer           Multiple assignments allowed on one line
      fullname="isaac bashevis singer"                   Use quotes for whitespace in value
      oldname=$fullname                                 Quotes not needed to preserve spaces in value


As shown in the previous example,double quotes (discussed later in” “Quoting” [7.7])
aren’t necessary around the value of one variable being used as the new value of a sec-
ond variable. Using them,though,doesn’t hurt either,and is necessary when concate-
nating variables:
        fullname="$first $middle $last"               Double quotes required here


-----------------------------------------------------------------------------------------------------

The idea is that programs should have a data source,a data sink (where data
goes),and a place to report problems. 

Append to a file with >>
  Use program >> file to send program’s standard output to the end of file.
    Like >,the >> operator creates the destination file if it doesn’t exist. However,if
    it already exists,instead of truncating the file,any new data generated by the
    running program is appended to the end of the file:



In contrast to writes,reading from /dev/null always returns end-of-file immediately.

The stty (set tty) command controls various settings of your terminal (or window).*
The –echo option turns off the automatic printing (echoing) of every character you
type; stty echo restores it.

-----------------------------------------------------------------

Earlier,we mentioned that the shell searches for commands along the search path,
$PATH. This is a colon-separated list of directories in which commands are found.
Commands may be compiled executables or shell scripts; there’s no real distinction
from the user’s perspective.


The shell ignores everything
from the # to the end of the line. (This is serendipitous; the special #! line described
earlier acts as a comment when the shell reads a script.) 





